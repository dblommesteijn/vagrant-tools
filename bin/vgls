#!/usr/bin/env ruby

require File.expand_path(File.dirname(__FILE__) + "/../lib/vagrant/tools")
require 'getoptlong'


def main()
  # configure vgtools
  vgtools_cfg = Vagrant::Tools.config do |c|
    # defaults
    c.prefix = ENV["HOME"]
    c.verbose = false
    c.output = {machine: false, long: false, only_active: false, vagrantfile: false, zombies: false}
    c.target = nil
    c.cmd = nil
    c.refresh_cache = false

    # parse regular commands with getopt
    begin
      opts = GetoptLong.new(
        ['--prefix', '-p', GetoptLong::REQUIRED_ARGUMENT],
        ['--verbose', '-v', GetoptLong::NO_ARGUMENT],
        ['--refresh-cache', '-x', GetoptLong::NO_ARGUMENT],
        ['--only-active', '-a', GetoptLong::NO_ARGUMENT],
        ['--zombies', '-z', GetoptLong::NO_ARGUMENT],
        ['--vagrantfile', '-V', GetoptLong::NO_ARGUMENT],
        ['--help', '-h', GetoptLong::NO_ARGUMENT],
      )
      opts.each do |opt, arg|
        case opt
          when '--prefix'
            c.prefix = arg
            c.refresh_cache = true
          when '--verbose'
            c.verbose = true
          when '--refresh-cache'
            c.refresh_cache = true
          when '--only-active'
            c.output[:only_active] = true
          when '--vagrantfile'
            c.output[:vagrantfile] = true
          when '--zombies'
            c.output[:zombies] = true
          when '--help'
            puts <<-EOF
vgls, version: #{Vagrant::Tools::VERSION}

usage: vgls [-pvxh] [TARGET]

  p : set lookup prefix (default $HOME)
  v : verbose output
  x : refresh cached results (.vagrant lookup)
  V : output Vagrantfile
  a : filter on running instances
  z : filter on zombie instances (no .config and running)
  TARGET : target a specific config (Vagrantfile dir)

  h : show this help message
            EOF
          exit
        end
      end
    rescue GetoptLong::InvalidOption => e
      exit
    end

    # parse commands and targets (outside getopt)
    ARGV.each_with_index do |arg, i|
      case i
      when 0
        c.target = arg
      when 1
        c.cmd = ARGV[1..-1].join(" ")
        break
      end
    end
  end

  # configuration
  cfg = Vagrant::Tools.get_config
  # output buffer
  output = Vagrant::Tools::Output.new(cfg)
  output.append("running `#{File.basename(__FILE__)}` in verbose mode (disable by removing [-v])", :verbose)
  output.append(cfg.to_s, :verbose)

  # verify errors
  verify = vgtools_cfg.verify? do |errors|
    # TODO: not sure if this should be here!?
    if cfg.output[:only_active] && cfg.output[:zombies]
      errors[:zombies] = "cannot lookup both only-active and zombies"
    end
  end
  # act on errors
  unless verify
    puts vgtools_cfg.error_messages
    exit 1
  end
  # build root object from found configs (internal)
  root = Vagrant::Tools::Root.new(cfg, output)
  nodes = []

  if !cfg.output[:zombies]
    # filter no-nodes
    if !cfg.output[:only_active] && cfg.target.nil?
      root.visit() do |node|
        nodes << node
      end
    # filter `only-active`
    elsif cfg.output[:only_active] && cfg.target.nil?
      root.visit() do |node|
        if node.is_a?(Vagrant::Tools::Orm::Config)
          nodes << node if node.has_active_machines?
        elsif node.is_a?(Vagrant::Tools::Orm::Machine)
          nodes << node if node.has_active_providers?
        elsif node.is_a?(Vagrant::Tools::Orm::Provider)
          nodes << node if node.active?
        end
      end
    # filter `target`
    elsif !cfg.output[:only_active] && !cfg.target.nil?
      root.visit() do |node|
        if node.is_a?(Vagrant::Tools::Orm::Config)
          nodes << node if node.match_target?(cfg.target)
        elsif node.is_a?(Vagrant::Tools::Orm::Machine)
          nodes << node if node.parent.match_target?(cfg.target)
        elsif node.is_a?(Vagrant::Tools::Orm::Provider)
          nodes << node if node.parent.match_target?(cfg.target)
        end
      end
    # filter `target` and `only-active`
    elsif cfg.output[:only_active] && !cfg.target.nil?
      root.visit() do |node|
        if node.is_a?(Vagrant::Tools::Orm::Config)
          nodes << node if node.has_active_machines? && node.match_target?(cfg.target)
        elsif node.is_a?(Vagrant::Tools::Orm::Machine)
          nodes << node if node.has_active_providers? && node.parent.match_target?(cfg.target)
        elsif node.is_a?(Vagrant::Tools::Orm::Provider)
          nodes << node if node.active? && node.parent.match_target?(cfg.target)
        end
      end
    end
  # filter `zombies` detached VMs
  else
    running_vms = Vagrant::Tools::Helper.get_running_vms
    root.visit() do |node|
      if node.is_a?(Vagrant::Tools::Orm::Provider)
        if !node.process.nil?
          running_vms.delete(node.process.pid)
        end
      end
    end
    if running_vms.size > 0
      running_vms.each do |pid, vm|
        output.append("#{vm.pid}, #{vm.cmdline}")
      end
    end
  end

  # determine how the nodes are output
  nodes.each do |node|
    # show vagrantfile
    if cfg.output[:vagrantfile]
      if node.is_a?(Vagrant::Tools::Orm::Config)
        output.append(node)
        output.append("-- Vagrantfile (#{node.vagrantfile}): ---------------------")
        output.append(node.vagrantfile_contents)
      end
    else
      # print all nodes
      if node.is_a?(Vagrant::Tools::Orm::Config)
        output.append(node) if !node.hidden
      elsif node.is_a?(Vagrant::Tools::Orm::Machine)
        output.append("- #{node.name} ", :nonewline)
      elsif node.is_a?(Vagrant::Tools::Orm::Provider)
        output.append("(#{node.status_s})")
      end
    end
  end

  # append cache status
  if root.cache.cache_old? && !cfg.refresh_cache
    a = root.cache.cache_time_a
    output.append("cache is %dd, %dh, %dm, and %ds old (consider refreshing -x)" % a)
  elsif cfg.verbose
    a = root.cache.cache_time_a
    output.append("cache is %dd, %dh, %dm, and %ds old" % a, :verbose)
  end
  # print output
  output.render()
end

# entry point
if File.basename(__FILE__) == File.basename($0)
  begin
    main()
  rescue Interrupt
    exit 0
  end
end

#!/usr/bin/env ruby

require File.expand_path(File.dirname(__FILE__) + "/../lib/vagrant/tools")
require 'getoptlong'


def main()
  # configure vgtools
  vgtools_cfg = Vagrant::Tools.config do |c|
    # defaults
    c.prefix = ENV["HOME"]
    c.verbose = false
    c.output = {machine: false, long: false, only_active: false}
    c.target = nil
    c.cmd = nil
    c.refresh_cache = false

    # parse regular commands with getopt
    begin
      opts = GetoptLong.new(
        ['--prefix', '-p', GetoptLong::REQUIRED_ARGUMENT],
        ['--verbose', '-v', GetoptLong::NO_ARGUMENT],
        ['--refresh-cache', '-x', GetoptLong::NO_ARGUMENT],
        ['--only-active', '-a', GetoptLong::NO_ARGUMENT],
        ['--help', '-h', GetoptLong::NO_ARGUMENT],
      )
      opts.each do |opt, arg|
        case opt
          when '--prefix'
            c.prefix = arg
            c.refresh_cache = true
          when '--verbose'
            c.verbose = true
          when '--refresh-cache'
            c.refresh_cache = true
          when '--only-active'
            c.output[:only_active] = true
          when '--help'
            puts <<-EOF
vgls, version: #{Vagrant::Tools::VERSION}

usage: vgls [-pvxh] [target]
  
  p : set lookup prefix (default $HOME)
  v : verbose output
  x : refresh cached results (.vagrant lookup)
  target : target a specific config (vagrantfile dir)

  h : show this help message

            EOF
          exit
        end
      end
    rescue GetoptLong::InvalidOption => e
      exit
    end

    # parse commands and targets (outside getopt)
    ARGV.each_with_index do |arg, i|
      case i
      when 0
        c.target = arg
      when 1
        c.cmd = ARGV[1..-1].join(" ")
        break
      end
    end
  end

  # verify errors
  verify = vgtools_cfg.verify? do |errors|
    # TODO: not sure if this should be here!?
  end
  # act on errors
  unless verify
    puts vgtools_cfg.error_messages
    exit
  end

  cfg = Vagrant::Tools.get_config
  if cfg.verbose
    puts "running `#{File.basename(__FILE__)}` in verbose mode (disable by removing [-v])"
  end

  # build root object from found configs (internal)
  root = Vagrant::Tools::Root.new
  # report requested output
  puts root.to_outputs

  # report old cache
  if root.cache.cache_old? 
    a = root.cache.cache_time_a
    puts "cache is %dd, %dh, %dm, and %ds old (consider refreshing -x)" % a
  elsif cfg.verbose
    a = root.cache.cache_time_a
    puts "cache is %dd, %dh, %dm, and %ds old" % a
  end
end

# entry point
if File.basename(__FILE__) == File.basename($0)
  begin
    main()
  rescue Interrupt
    exit 0
  end
end

#!/usr/bin/env ruby

require File.expand_path(File.dirname(__FILE__) + "/../lib/vagrant/tools")
require 'optparse'


def main(argv)
  # set configuration
  vgtools_cfg = Vagrant::Tools.config do |c|
    # defaults
    c.prefix = ENV["HOME"]
    c.verbose = false
    # getopts
    opt_parser = OptionParser.new do |opts|
      opts.banner = "Usage: vgctl [options]"

      opts.on("-p", "--prefix DIR", String, "Define prefix (default $HOME)") do |v|
        c.prefix = v
      end

      # list machines
      opts.on("-v", "--verbose", "Verbose output") do |v|
        c.verbose = true
      end
      # target specific config (Vagrantfile)
      opts.on("-t", "--target TARGET", String, "Target specific Vagrantfile directory") do |v|
        c.target = v
      end
      # vagrant command
      opts.on("-c", "--cmd COMMAND", String, "Run vagrant command relative to -t TARGET (-c \"up\")") do |v|
        c.cmd = v
      end

      opts.on("-x", "--refresh-cache", String, "Refresh cached results") do |v|
        c.target = v
      end

      opts.on_tail("-h", "--help", "Show this message") do
        puts opts
        exit 1
      end
    end
    begin
      opt_parser.parse!
    rescue OptionParser::MissingArgument => e
      puts e.message
      exit 1
    rescue OptionParser::InvalidOption => e
      puts e.message
      exit 1
    end
  end

  unless vgtools_cfg.verify?
    puts vgtools_cfg.error_messages
    exit 1
  end

  cfg = Vagrant::Tools.get_config 

  if cfg.verbose
    puts "Running `#{File.basename(__FILE__)}` in verbose mode (disable by removing -v [options])"
  end
  
  ls = Vagrant::Tools::List.new
  config = ls.find_by_project_root(cfg.target)
  if config.nil?
    puts "target config not found"
    exit
  else
    puts "executing: #{cfg.cmd}" if cfg.verbose
  end
  config.exec_command(cfg.cmd)
end


if File.basename(__FILE__) == File.basename($0)
  begin
    main(ARGV)
  rescue Interrupt
    exit 0
  end
end
